#!/bin/bash
set -Eeo pipefail
# TODO swap to -Eeuo pipefail above (after handling all potentially-unset variables)

MESHCENTRAL_HOME=$(pwd)

export NODE_ENV=production

# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
file_env() {
	local var="$1"
	local fileVar="${var}_FILE"
	local def="${2:-}"
	if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
		printf >&2 'error: both %s and %s are set (but are exclusive)\n' "$var" "$fileVar"
		exit 1
	fi
	local val="$def"
	if [ "${!var:-}" ]; then
		val="${!var}"
	elif [ "${!fileVar:-}" ]; then
		val="$(< "${!fileVar}")"
	fi
	export "$var"="$val"
	unset "$fileVar"
}


# check to see if this file is being run or sourced from another script
_is_sourced() {
	# https://unix.stackexchange.com/a/215279
	[ "${#FUNCNAME[@]}" -ge 2 ] \
		&& [ "${FUNCNAME[0]}" = '_is_sourced' ] \
		&& [ "${FUNCNAME[1]}" = 'source' ]
}

ensure_dir() {
	local dir="$1"
	if [ ! -d "$dir" ]; then
		echo "Creating directory: $dir"
		mkdir -p "$dir"
	else
		echo "Directory already exists: $dir"
	fi
	chmod 755 "$dir"
	chown -R appuser:appgroup "$dir"
}

docker_setup_env() {
	echo "Setting up environment variables..."
	file_env 'MC_SESSION_KEY'
	file_env 'MC_ZIP_PASSWORD' 'MyReallySecretPassword2'
}

docker_setup_dirs() {
	echo "Setting up directories..."
	ensure_dir $MESHCENTRAL_HOME/meshcentral-data
	ensure_dir $MESHCENTRAL_HOME/meshcentral-files
	ensure_dir $MESHCENTRAL_HOME/meshcentral-backups
	# ensure_dir $MESHCENTRAL_HOME/meshcentral-logs
}

generate_envdata() {
    echo "Generating environment data..."
    if [ -z "$MC_SESSION_KEY" ]; then
        export MC_SESSION_KEY="$(cat /dev/urandom | tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)"
    fi
   
    envdata.js --output $MESHCENTRAL_HOME/envdata.json --pretty --prefix MC_
    if [ -f envdata.json ]; then
        echo "Environment data generated successfully."
    else
        echo "Failed to generate environment data."
        exit 1
    fi
}

generate_config() {
	# check if $MESHCENTRAL_HOME/meshcentral-data/config.json exists and not contains "automatically generated by entrypoint"
	if [ -f "$MESHCENTRAL_HOME/meshcentral-data/config.json" ]; then
	   	if ! grep -q "managed by scripts" "$MESHCENTRAL_HOME/meshcentral-data/config.json"; then
			echo "Configuration file is managed manually, skipping generation."
			return
		fi
	
	fi
    echo "Generating MeshCentral configuration..."
    render-hbs.js $MESHCENTRAL_HOME/config.json.template --data $MESHCENTRAL_HOME/envdata.json > $MESHCENTRAL_HOME/meshcentral-data/config.json
	echo "$MESHCENTRAL_HOME/meshcentral-data/config.json generated successfully."
}



_main() {
	cd "$MESHCENTRAL_HOME" 
    # if first arg looks like a flag, assume we want to run meshcentral server
	if [ "${1:0:1}" = '-' ]; then
		set -- meshcentral "$@"
	fi

    if [ "$1" = 'meshcentral' ] ; then 
		docker_setup_env
		if [ "$(id -u)" = '0' ]; then
			docker_setup_dirs
			echo "restart script as appuser user"
			exec gosu appuser "$BASH_SOURCE" "$@"
		fi
		generate_envdata
        generate_config
        echo "Starting MeshCentral server..."
        #meshcentral --cert "$HOSTNAME"
    fi
    

    exec "$@"
}


if ! _is_sourced; then
	_main "$@"
fi